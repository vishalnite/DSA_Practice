Following are the basic bit manipulation operations that are available in most programming languages:
An integer in represented by 32 bits in c++

1. &(bitwise AND) - It gives 1 when all the inputs are 1, else gives 0.
    [Note] - Easy way to remember - If all 1's then 1
                                    Any 0 then 0
    Eg- 5 & 2 -> 0
        In binary - 101 & 010 -> 000

2. |(bitwise OR) - It gives 0 when all the inputs are 0, else gives 1.
    [Note] - Easy way to remember - If any 1 then 1
                                    All 0's then 0
    Eg- 5 | 2 -> 7
        In binary - 101 | 010 -> 111

3. ~(bitwise NOT) - It flips all 1's to 0's and all 0's to 1's.

    Eg- ~(5) -> -6
        In binary - ~(00000000000000000000000000000101) -> (11111111111111111111111111111010)

4. ^(bitwise XOR) - For even number of 1's the value is 0, else 1.

    Eg- 5 ^ 3 -> 6
        In binary - 101 ^ 011 -> 110

5. <<(left shift) - It shifts the bits to the given number of places to the left.
                    The result of this number can also be found by multiplying the number with (2 ^ number of places to shift)
    Eg- 5 << 1 -> 10
        In binary - 101 >> 1 -> 1010
        also 5 * (2 ^ 1) -> 10

5. >>(right shift) - It shifts the bits to the given number of places to the right.
                    The result of this number can also be found by dividing the number with (2 ^ number of places to shift)
    Eg- 5 >> 1 -> 2
        In binary - 101 >> 1 -> 10
        also 5 / (2 ^ 1) -> 2